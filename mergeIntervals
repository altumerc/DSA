Solution 1:
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length <= 1) return intervals;
        Arrays.sort(intervals,(o1,o2)->Integer.compare(o1[0],o2[0]));
        List<int[]> result = new ArrayList<>();
        int start = intervals[0][0];
        int end = intervals[0][1];
        for(int[] i : intervals)
            {
                if(i[0] <= end)
                {
                    end = Math.max(end,i[1]);
                }
                else
                {
                    result.add(new int[]{start,end});
                    start = i[0];
                    end = i[1];
                }
            }
            result.add(new int[]{start,end});
        return result.toArray(new int[0][]);
    }
}

Solution 2:
class Solution {
  public int[][] merge(int[][] intervals) {
    if(intervals.length <= 1) return intervals;
    List<int[]> result = new ArrayList<>();
    int[] newInterval = intervals[0];
    result.add(newInterval);
    for(int[] interval : intervals){
      if(interval[0] <= newInterval[1])
      newInterval[1] = Math.max(newInterval[1],interval[1]);
      else{
        newInterval = interval;
        result.add(interval);
        }
   }
      return result.toArray(int[result.size()][]);
}
